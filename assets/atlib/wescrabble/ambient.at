def Peer := isolate: { 
    import /.at.lang.futures;

    def ref;
    def online;
    def backlog;
    def futs;

    def init(ref, online := true){
        self.ref := ref;
        self.online := online;
        self.backlog := [];
        self.futs := [];

        when: ref disconnected: {online = false};
        when: ref reconnected: {
            online = true;
            send_backlog();
        };

        system.println("Discover peer: " + ref);
    };

    def send_backlog(){
        (1**(backlog.length+1)).each: {|i|
            def msg := futurize(backlog[i], futs[i]);
            ref <+ msg;
        };
        backlog := [];
        futs := [];
    };

    def send(msg){
        if: online
        then: {ref <+ msg;}
        else: {
            def [fut, _] := makeFuture();
            backlog := backlog + [msg];
            futs += [fut];
            fut;
        }
    };
};

def AmbientRefMirror := mirror: {
    def peers;
    def offline;

    def init(base, T){
        super^init(base);
        peers := [];

        whenever: T discovered: {|remote|
            peers := peers + [Peer.new(remote)];
        };
    };

    def receive(msg){
        peers.each: {|p| p.send(msg)};
    };
};

deftype AmbientRef;

def ambient: obj as: Type {
    object: {} taggedAs: [AmbientRef] mirroredBy: {|base|
        export: obj as: Type;
        AmbientRefMirror.new(base, Type);
    };
};

self;
