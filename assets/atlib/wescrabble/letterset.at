/* Return a shuffled copy of arr */
def shuffle(arr){
    def rnd := jlobby.java.util.Random.new();

    def i := 0;
    def r;
    def copy[arr.length]{i := i+1; arr[i]};

    def res[arr.length]{
        i := 1 + rnd.nextInt(copy.length);
        while: {copy[i] == nil} do: {
            i := (i+1) % arr.length;
        };
        r := copy[i];
        copy.atPut(i, nil);
        r;
    };
};

def VOWELS := "aeiouy".explode();
def CONSONANTS := "bcdfghjklmnpqrstvwxz".explode();

def LetterSet := object: {
    def set;

    def add(letter){
        def x := set.get(letter);
        if: x == nil then: {x := 0};
        set.put(letter, x+1);
    };

    def init(letters){
        set := jlobby.java.util.HashMap.new();
        letters.each: &add;
    };

    def each: closure {
        def it := set.keySet().iterator();
        while: {it.hasNext()} do: {
            def l := it.next();
            def n := set.get(l);
            closure(l, n);
        };
    };

    def size(){
        def res := 0;
        each: {|_, x| res := res + x};
        res;
    };

    def pairwise(other, op){
        def copy := LetterSet.new([]);
        copy.set := set.clone();

        other.each: {|letter, otherCount|
            def myCount := copy.set.get(letter);
            if: myCount == nil then: {myCount := 0};
            copy.set.put(letter, op(myCount, otherCount));
        };
        copy;
    };

    def -(other){
        pairwise(other, {|me, you| me - you});
    };

    def +(other){
        pairwise(other, {|me, you| me + you});
    };

    def positive(){
        def res := true;
        each: {|_, count|
            if: count < 0
            then: {res := false}
        };
        res;
    };

    def repr(){ 
        set.toString();
    };

    def toList(){
        def res := jlobby.java.util.ArrayList.new();
        each: {|letter, count|
            0.to: count do: {|_| res.add(letter)};
        };
        res
    };
};

self;
