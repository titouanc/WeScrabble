import /.at.lang.futures;
import /.wescrabble.ambientref;
import ~.fixtures;

// Delay to apply when expecting an ambient ref to be online
def AMBIENT_DELAY := 500.millisec;

def sessionTest(){
    extend: /.at.unit.test.UnitTest.new("TestAmbient") with: {
        /* Test that an async call on an Ambient ref returns the number of
           peers to whom a message was sent */
        def testAsyncAmbientSize(){
            deftype PTestAsyncAmbientSize;
            def a := ambient: Person("a") as: PTestAsyncAmbientSize;

            def aPerson(name, type){
                actor: {|name, type|
                    import /.wescrabble.ambientref;
                    import ~.fixtures;
                    ambient: Person(name) as: type;
                };
            };
            aPerson("b", PTestAsyncAmbientSize);
            aPerson("c", PTestAsyncAmbientSize);

            /.at.support.timer.when: AMBIENT_DELAY elapsedWithFuture: {
                def r := a<-hit("hi");
                self.assertEquals(r, 2);
            };
        };

        /* Test that message sent from the Ambient ref creation are
           delivered to newcomers */
        def testAsyncAmbientBuffer(){
            deftype PTestAsyncAmbientBuffer;
            
            // B connects and hits 42
            actor: {|PTestAsyncAmbientBuffer|
                import /.wescrabble.ambientref;
                import ~.fixtures;
                def bref := ambient: Person("b") as: PTestAsyncAmbientBuffer;
                bref<-hit(42);
            };

            def [fut, res] := makeFuture();
            /.at.support.timer.when: AMBIENT_DELAY elapsed: {
                def a := Person("a");
                def aref := ambient: a as: PTestAsyncAmbientBuffer;

                // A connects then assert it gets the '42' message
                /.at.support.timer.when: AMBIENT_DELAY elapsed: {
                    self.assertEquals(a.recorded.length, 1);
                    self.assertEquals(a.recorded[1], 42);
                    res.resolve(true);
                }; 
            };

            fut;
        }
    };
};

self;
