import ~.suggestion;
import ~.letterset;
import ~.tamtam;

/* Direct P2P communication type */
deftype AnAwesomeWeScrabble;

/* The whole alphabet */
def alphabet := "abcdefghijklmnopqrstubwxyz".explode();

/*
 * STILL TODO:
 *  - Players of the same team can see and exchange letters from each other
 *  - 
 */

def makeWeScrabble(UI){
    def log := Logger("WeScrabble");

    UI.setAppTitle("We Scrabble /o<");

    def TheAwesomeWeScrabble := object: {
        def mySelf := self;
        def table := (1***15).map: {|_| (1***15).map: {|__| Suggestion.EMPTY}};
        def observers := jlobby.java.util.LinkedList.new();
        def letters := LetterSet.new([]);

        deftype TeamA;
        deftype TeamB;
        def opponnentOf: team {if: team == TeamB then: {TeamA} else: {TeamB}};
        def indexOfTeam: team {if: team == TeamA then: {0} else: {1}};
        def teamOfIndex: idx {if: idx == 0 then: {TeamA} else: {TeamB}};

        deftype Player;
        deftype Letter;
        deftype Word;

        def myTeam := teamOfIndex: UI.getMyTeam();
        def myName := UI.getMyName();

        def notifyObservers(){
            def it := observers.iterator();
            while: {it.hasNext()}
            do: {
                it.next().update();
            };
        };

        /* Initialize tuplespace */
        def Ts := TamTam(AnAwesomeWeScrabble, {|tup|
            (tup[1] == Word).or: {tup[2] == myTeam}
        });

        Ts.put(tuple: [Player, myTeam, myName]);

        /* Add 15 letters to my team */
        randomLetters(15).each: {|l|
            Ts.put(tuple: [Letter, myTeam, l]);
        };

        /* Observe joins */
        Ts.observe: (tuple: [Player, myTeam, var: `name]) do: {|tup|
            UI.showMessage(tup[3] + " joins your team !");
        };

        Ts.observeAll: (tuple: [Letter, myTeam, var: `player, var: ` l]) do: {|tup|
            def player := tup[3];
            if: player != myName
            then: {
                def res := List.new;
                Ts.getAll(tuple: [Letter, myTeam, player, var: `l]).each: {|tup|
                    res.add(tup[4]);
                };
                UI.setPlayerRack(player, res);
            }
        };

        Ts.observeAll: (tuple: [Word, var: `_, var: `sugg]) do: {|tup|
            def sugg := Suggestion.new(@(tup[3]));
            sugg.applyOn(table);
            notifyObservers();
        };
        /**/

        /* Pick letters from the bag */
        def pickLetters(){
            if: letters.size() < 7
            then: {
                /* Pick a letter, then pick n-1 letters */
                Ts.take: (tuple: [Letter, myTeam, var: `l]) do: {|tup|
                    Ts.put(tuple: [Letter, myTeam, myName, tup[3]]);
                    letters.add(tup[3]);
                    UI.showMyLetters(letters.toList());
                    pickLetters();
                };
            };
        };

        def applyBonuses(sugg){
            def bonus := 0;
            /* Special cells */
            sugg.each: {|let, row, col|
                // Red cell: Add 5 random letters to the opponent
                if: ((row == 8).and: {col == 8})
                then: {
                    randomLetters(5).each: {|l|
                        Ts.put(tuple: [Letter, (opponnentOf: myTeam), l]);
                        bonus := bonus + 1;
                    };
                }
                else: {
                    // Blue cell: create the same letter for the opponent team
                    if: ((row == col).or: {row == 16-col})
                    then: {
                        Ts.put(tuple: [Letter, (opponnentOf: myTeam), let]);
                        bonus := bonus + 1;
                    }
                }
            };

            if: bonus > 0
            then: {
                UI.showMessage("You drop " + bonus + " letters to the opponents");
            };
        };

        /* The local user plays a suggestion */
        def play(sugg){
            {|return|
                def newLetters := letters - LetterSet.new(sugg.requiredLetters(table));
                if: newLetters.positive.not
                then: {
                    UI.showMessage("You don't have all required letters");
                    return(false);
                };

                if: sugg.validOn(table, {|err| UI.showMessage(err)})
                then: {
                    /* Remove letter from my rack */
                    sugg.requiredLetters(table).each: {|l|
                        Ts.take(tuple: [Letter, myTeam, myName, l]);
                    };

                    /* And add suggestion */
                    Ts.put(tuple: [Word, myTeam, sugg.toArray]);
                    letters := newLetters;
                    UI.showMyLetters(letters.toList());
                    pickLetters();
                    spawn: {applyBonuses(sugg)};
                    return(true);
                };
                
                false;
            }.escape()
        };

        def localInterface := object: {
            def getLetterAt(row, column){
                mySelf.table[row+1][column+1]
            };

            def addWord(word, row, col, horizontally){
                mySelf.play(
                    Suggestion.new(
                        mySelf.myName, word, row+1, col+1, horizontally
                    )
                );
            };

            def addObserver := mySelf.observers.&add;

            def getMyLetters(){
                mySelf.letters.toList();
            };
            
            UI.setBackend(self);
        };

        /* Finally start everything */
        pickLetters();
    };

    TheAwesomeWeScrabble.localInterface;
};

def start(){
    network.online;
    makeWeScrabble(Android.parent);
};

self;
