import ~.suggestion;
import ~.letterset;
import ~.tamtam;

/*
 * TODO:
 *  - End of game
 */

/* Direct P2P communication type */
deftype AnAwesomeWeScrabble;

/* The whole alphabet */
def alphabet := "abcdefghijklmnopqrstubwxyz".explode();

def makeWeScrabble(UI){
    def log := Logger("WeScrabble");

    UI.setAppTitle("We Scrabble /o<");

    def TheAwesomeWeScrabble := object: {
        def mySelf := self;
        def table := (1***15).map: {|_| (1***15).map: {|__| Suggestion.EMPTY}};
        def observers := jlobby.java.util.LinkedList.new();

        deftype TeamA;
        deftype TeamB;
        def opponnentOf: team {if: team == TeamB then: {TeamA} else: {TeamB}};
        def indexOfTeam: team {if: team == TeamA then: {0} else: {1}};
        def teamOfIndex: idx {if: idx == 0 then: {TeamA} else: {TeamB}};

        /* Tuplespace tags (first fiels of all tuples) */
        deftype Player; // A player identifies itself
        deftype Letter; // A letter in a player rack or to be taken
        deftype Word;   // A formed word

        def myTeam := teamOfIndex: UI.getMyTeam();
        def myName := UI.getMyName();

        def notifyObservers(){
            def it := observers.iterator();
            while: {it.hasNext()}
            do: {
                it.next().update();
            };
        };

        /* Initialize tuplespace */
        def Ts := TamTam(AnAwesomeWeScrabble);
        Ts.accepts: isolate: {
            def accept(tup){
                (tup[1] == Word).or: {tup[2] == myTeam}
            }
        };

        Ts.put(tuple: [Player, myTeam, myName]);

        /* Add 15 letters to my team */
        randomLetters(15).each: {|l|
            Ts.put(tuple: [Letter, myTeam, l]);
        };

        /* A teammate joins */
        Ts.observe: (tuple: [Player, myTeam, var: `name]) do: {|tup|
            def name := tup[3];
            if: name != myName
            then: {
                UI.showMessage(tup[3] + " joins your team !");
            };
        };

        def rackOf(playerName){
            def res := List.new;
            Ts.getAll(tuple: [Letter, myTeam, playerName, var: `l]).each: {|tup|
                res.add(tup[4]);
            };
            res;
        };

        /* A teammate took a letter */
        Ts.observeAll: (tuple: [Letter, myTeam, var: `player, var: ` l]) do: {|tup|
            def player := tup[3];
            def rack := rackOf(player);

            if: player == myName
            then: {UI.showMyLetters(rack)}
            else: {UI.setPlayerRack(player, rack)};
        };

        /* Someone add a word */
        Ts.observeAll: (tuple: [Word, var: `_, var: `sugg]) do: {|tup|
            def sugg := Suggestion.new(@(tup[3]));
            sugg.applyOn(table);
            notifyObservers();

            if: sugg.name != myName
            then: {
                /* player has put letters, update his rack */
                UI.setPlayerRack(sugg.name, rackOf(sugg.name));
            };
        };
        /**/

        /* Pick letters from the bag */
        def pickLetters(n := 7){
            if: n > 0
            then: {
                /* Pick a letter, then pick n-1 letters */
                Ts.take: (tuple: [Letter, myTeam, var: `l]) do: {|tup|
                    Ts.put(tuple: [Letter, myTeam, myName, tup[3]]);
                    pickLetters(n - 1);
                };
            };
        };

        pickLetters();

        /* Apply bonuses (letters on special cells) for a word suggestion */
        def applyBonuses(sugg){
            def bonus := 0;
            /* Special cells */
            sugg.each: {|let, row, col|
                // Red cell: Add letters from this word to the opponent team
                if: ((row == 8).and: {col == 8})
                then: {
                    sugg.each: {|l, _, __|
                        Ts.put(tuple: [Letter, (opponnentOf: myTeam), l]);
                        bonus := bonus + 1;
                    };
                }
                else: {
                    // Blue cell: create the same letter for the opponent team
                    if: ((row == col).or: {row == 16-col})
                    then: {
                        Ts.put(tuple: [Letter, (opponnentOf: myTeam), let]);
                        bonus := bonus + 1;
                    }
                }
            };

            if: bonus > 0
            then: {
                UI.showMessage("You drop " + bonus + " letters to the opponents");
            };
        };

        /* The local user plays a suggestion */
        def play(sugg){
            def letters := LetterSet.new(rackOf(myName).toArray);
            def required := LetterSet.new(sugg.requiredLetters(table));
            def newLetters := letters - required;

            {|return|
                if: required.size == 0
                then: {
                    UI.showMessage("You must at least place 1 letter");
                    return(false);
                };

                if: newLetters.positive.not
                then: {
                    UI.showMessage("You don't have all required letters");
                    return(false);
                };

                if: sugg.validOn(table, {|err| UI.showMessage(err)})
                then: {
                    /* Remove letter from my rack */
                    sugg.requiredLetters(table).each: {|l|
                        Ts.take(tuple: [Letter, myTeam, myName, l]);
                    };

                    /* And add suggestion */
                    Ts.put(tuple: [Word, myTeam, sugg.toArray]);
                    UI.showMyLetters(newLetters.toList());
                    pickLetters(required.size());
                    applyBonuses(sugg);
                    return(true);
                };
                
                false;
            }.escape()
        };

        def swapLetter(myLetter, player, hisLetter){
            /* Take my letter, so that it cannot be played */
            Ts.take: (tuple: [Letter, myTeam, myName, myLetter]) do: {|myTup|
                /* Take letter from other player in max 10s */
                when: due(10.seconds, Ts.take(tuple: [Letter, myTeam, player, hisLetter]))
                becomes: {|hisTup|
                    /* Give my letter to the other player */
                    Ts.put(tuple: [Letter, myTeam, player, myLetter]);

                    /* Put his letter in my rack */
                    Ts.put(tuple: [Letter, myTeam, myName, hisLetter]);
                    UI.showMessage("Swapped letter with " + player);
                }
                catch: DueTimeout using: {|@_|
                    /* If removal failed, insert my letter back */
                    Ts.put(myTup);
                    UI.showMessage("Cannot swap letter with " + player);
                };
            };
        };

        def localInterface := object: {
            def getLetterAt(row, column){
                mySelf.table[row+1][column+1]
            };

            def addWord(word, row, col, horizontally){
                mySelf.play(
                    Suggestion.new(
                        mySelf.myName, word, row+1, col+1, horizontally
                    )
                );
            };

            def addObserver := mySelf.observers.&add;

            def swapLetter(myLetter, player, hisLetter){
                mySelf.swapLetter(myLetter.toLowerCase(), player, hisLetter.toLowerCase());
                UI.showMessage(
                    "Take " + hisLetter.toUpperCase() + " from " + player +
                    " and give " + myLetter.toUpperCase() + "..."
                );
            };
            
            UI.setBackend(self);
        };
    };

    TheAwesomeWeScrabble.localInterface;
};

def start(){
    network.online;
    makeWeScrabble(Android.parent);
};

self;
