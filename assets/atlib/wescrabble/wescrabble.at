import /.at.lang.futures;
import ~.ambient;
import ~.suggestion;

/* Direct communication */
deftype AnAwesomeWeScrabble;

/* Ambient types */
deftype Everybody;
deftype TeamA;
deftype TeamB;

def randInt(){
    jlobby.java.util.Random.new().nextInt();
};

def makeWeScrabble(UI){
    UI.setAppTitle("We Scrabble /o/");

    object: {
        def myName := UI.getMyName();
        def randomID := randInt();
        def discovered := false;
        def team := nil;
        def observers := jlobby.java.util.LinkedList.new();
        def peers := jlobby.java.util.HashMap.new();
        def table := (1**16).map: {|row|
            (1**16).map: {|column| Suggestion.EMPTY}
        };

        def notifyObservers(){
            def it := observers.iterator();
            while: { it.hasNext() } do: {
                it.next().update();
            };
        };

        def applySuggestion(sugg){
            sugg.applyOn(table);
            notifyObservers();
        };

        def localInterface := /.wescrabble.localif.makeLocalInterface(self, UI);

        def remoteInterface := object: {
            def getName(){
                discovered := true;
                myName;
            };

            def getRandomID(){
                randomID;
            };

            def addWord(sugg){
                applySuggestion(sugg);
            };
        };

        def everybody := ambient: remoteInterface as: Everybody;

        def discoverPeer(other){
            when: other<-getName()@TwoWay becomes: {|name|
                peers.put(name, other);
                UI.setMessage("Discovered " + name + " !");
                if: (team == nil)
                then: {
                    when: other<-getRandomID()@TwoWay becomes: {|otherID|
                        while: {(otherID == randomID).and: {discovered.not}}
                        do: {randomID = randInt;};

                        if: (randomID < otherID)
                        then: {team := ambient: remoteInterface as: TeamA;}
                        else: {team := ambient: remoteInterface as: TeamB;}; 
                        UI.setMessage("Joining team " + team);
                    };
                };
            };
        };

        UI.setMessage("Hello " + myName + " ! Waiting for other players...");

        export: remoteInterface as: AnAwesomeWeScrabble;
        whenever: AnAwesomeWeScrabble discovered: &discoverPeer;
    };
};

def start(){
    network.online;
    makeWeScrabble(Android.parent);
};

self;
